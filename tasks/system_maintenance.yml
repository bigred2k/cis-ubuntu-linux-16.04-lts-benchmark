---

- shell: dpkg --get-selections | grep -v deinstall | awk '{ print $1 }'
  register: dpkg_output

- name: 6.1.1 Audit system file permissions (Not Scored) 
  shell: dpkg --verify {{ item }}
  with_items: "{{ dpkg_output.stdout_lines }}"
  when: dpkg_verify == true
  
- name: 6.1.2 Ensure permissions on /etc/passwd are configured (Scored)
  file:
    path: /etc/passwd
    mode: 0644
    owner: root
    group: root

- name: 6.1.3 Ensure permissions on /etc/shadow are configured (Scored)
  file:
    path: /etc/shadow
    mode: 0640
    owner: root
    group: root

- name: 6.1.4 Ensure permissions on /etc/group are configured (Scored)
  file:
    path: /etc/group
    mode: 0644
    owner: root
    group: root

- name: 6.1.5 Ensure permissions on /etc/gshadow are configured (Scored)
  file:
    path: /etc/gshadow
    mode: 0640
    owner: root
    group: root

- name: 6.1.6 Ensure permissions on /etc/passwd- are configured (Scored)
  file:
    path: /etc/passwd-
    mode: 0600
    owner: root
    group: root

- name: 6.1.7 Ensure permissions on /etc/shadow- are configured (Scored)
  file:
    path: /etc/shadow-
    mode: 0600
    owner: root
    group: root

- name: 6.1.8 Ensure permissions on /etc/group- are configured (Scored)
  file:
    path: /etc/group-
    mode: 0600
    owner: root
    group: root

- name: 6.1.9 Ensure permissions on /etc/gshadow- are configured (Scored)
  file:
    path: /etc/gshadow-
    mode: 0600
    owner: root
    group: root

- name: 6.1.10 Ensure no world writable files exist (Scored)
  shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002 -print
  changed_when: false
  failed_when: false
  check_mode: no
  register: world_files

# Need a better idea for dealing with world writeable file discovery, this just prints it out
- name: 6.1.10 Ensure no world writable files exist (Scored)
  debug: "{{ item }}"
  with_items: "{{world_files.stdout_lines}}"

- name: 6.1.11 Ensure no unowned files or directories exist (Scored)
  shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser -ls
  changed_when: false
  failed_when: false
  check_mode: no
  register: unowned_files

# Need a better idea for dealing with unowned file discovery
- name: 6.1.11 Ensure no unowned files or directories exist (Scored)
  debug: "{{ item }}"
  with_items: "{{unowned_files.stdout_lines}}"

- name: 6.1.12 Ensure no ungrouped files or directories exist (Scored)
  shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup -ls
  changed_when: false
  failed_when: false
  check_mode: no
  register: ungrouped_files

# Need a better idea for dealing with ungrouped file discovery
- name: 6.1.12 Ensure no ungrouped files or directories exist (Scored)
  debug: "{{ item }}"
  with_items: "{{ungrouped_files.stdout_lines}}"

- shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -4000 -print
  changed_when: False
  failed_when: False
  check_mode: no
  register: suid_files

- name: 6.1.13 Audit SUID executables (Not Scored)
  debug:
    msg: "Audit SUID {{ item }}"
  with_items: "{{suid_files.stdout_lines}}"

- shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -2000 -print
  changed_when: False
  failed_when: False
  check_mode: no
  register: gsuid_files

- name: 6.1.14 Audit SGID executables (Not Scored)
  debug:
    msg: "Audit SGID {{ item }}"
  with_items: "{{gsuid_files.stdout_lines}}"

- name: 6.2.1 Ensure password fields are not empty (Scored)
  command: awk -F':' '($2 == "" ) { print $1 }' /etc/shadow
  register: awk_empty_shadow
  changed_when: False
  check_mode: no
  failed_when: awk_empty_shadow.stdout != '' and lock_shadow_accounts == False

- name: 6.2.2 Ensure no legacy "+" entries exist in /etc/passwd (Scored)
  command: grep '^+:' /etc/passwd
  register: plus_pass
  failed_when: plus_pass.rc == 0
  changed_when: plus_pass.rc == 0

- name: 6.2.3 Ensure no legacy "+" entries exist in /etc/shadow (Scored)
  command: grep '^+:' /etc/shadow
  register: plus_shadow
  failed_when: plus_shadow.rc == 0
  changed_when: plus_shadow.rc == 0

- name: 6.2.4 Ensure no legacy "+" entries exist in /etc/group (Scored)
  command: grep '^+:' /etc/group
  register: plus_group
  failed_when: plus_group.rc == 0
  changed_when: plus_group.rc == 0

- name: 6.2.5 Ensure root is the only UID 0 account (Scored)
  command: awk -F':' '($3 == 0) { print $1 }' /etc/passwd
  register: uid_zero_root
  changed_when: False
  failed_when: uid_zero_root.stdout != 'root'

- name: 6.2.6 Ensure root PATH Integrity (Scored)
  shell: |
    if [ "`echo $PATH | grep :: `" != "" ]; then
      echo "Empty Directory in PATH (::)"
    fi

    if [ "`echo $PATH | grep :$`" != "" ]; then
      echo "Trailing : in PATH"
    fi

    p=`echo $PATH | sed -e 's/::/:/' -e 's/:$//' -e 's/:/ /g'`
    set -- $p
    while [ "$1" != "" ]; do
      if [ "$1" = "." ]; then
        echo "PATH contains ."
        shift
        continue
      fi
      if [ -d $1 ]; then
        dirperm=`ls -ldH $1 | cut -f1 -d" "`
        if [ `echo $dirperm | cut -c6 ` != "-" ]; then
          echo "Group Write permission set on directory $1"
        fi
        if [ `echo $dirperm | cut -c9 ` != "-" ]; then
          echo "Other Write permission set on directory $1"
        fi
        dirown=`ls -ldH $1 | awk '{print $3}'`
        if [ "$dirown" != "root" ] ; then
          echo $1 is not owned by root
        fi
      else
        echo $1 is not a directory
      fi
      shift
    done
  args:
    executable: /bin/bash
  register: root_path_integrity

- debug: var=root_path_integrity.stdout_lines

- name: 6.2.7 Ensure all users' home directories exist (Scored)
  shell: |
    cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/usr/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      fi
    done
  args:
    executable: /bin/bash    
  register: home_directories_exist

- debug: var=home_directories_exist.stdout_lines

- name: 6.2.8 Ensure users' home directories permissions are 750 or more restrictive (Scored)
  shell: |
    cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/usr/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        dirperm=`ls -ld $dir | cut -f1 -d" "`
        if [ `echo $dirperm | cut -c6` != "-" ]; then
          echo "Group Write permission set on the home directory ($dir) of user $user"
        fi
        if [ `echo $dirperm | cut -c8` != "-" ]; then
          echo "Other Read permission set on the home directory ($dir) of user $user"
        fi
        if [ `echo $dirperm | cut -c9` != "-" ]; then
          echo "Other Write permission set on the home directory ($dir) of user $user"
        fi
        if [ `echo $dirperm | cut -c10` != "-" ]; then
          echo "Other Execute permission set on the home directory ($dir) of user $user"
        fi
      fi
    done
  args:
    executable: /bin/bash 
  register: home_directories_permissions

- debug: var=home_directories_permissions.stdout_lines

- name: 6.2.9 Ensure users own their home directories (Scored)
  shell: |
    cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/usr/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        owner=$(stat -L -c "%U" "$dir")
        if [ "$owner" != "$user" ]; then
          echo "The home directory ($dir) of user $user is owned by $owner."
        fi
      fi
    done
  args:
    executable: /bin/bash   
  register: home_directories_own

- debug: var=home_directories_own.stdout_lines

- name: 6.2.10 Ensure users' dot files are not group or world writable (Scored)
  shell: |
    cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        for file in $dir/.[A-Za-z0-9]*; do
          if [ ! -h "$file" -a -f "$file" ]; then
            fileperm=`ls -ld $file | cut -f1 -d" "`
            
            if [ `echo $fileperm | cut -c6`  != "-" ]; then
              echo "Group Write permission set on file $file"
            fi
            if [ `echo $fileperm | cut -c9`  != "-" ]; then
              echo "Other Write permission set on file $file"
            fi
          fi
        done
      fi
    done
  args:
    executable: /bin/bash 
  register: user_dot_files

- debug: var=user_dot_files.stdout_lines

- name: 6.2.11 Ensure no users have .forward files (Scored)
  shell: |
    cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        if [ ! -h "$dir/.forward" -a -f "$dir/.forward" ]; then
          echo ".forward file $dir/.forward exists"
        fi
      fi
    done 
  args:
    executable: /bin/bash 
  register: user_forward_files

- debug: var=user_forward_files.stdout_lines

- name: 6.2.12 Ensure no users have .netrc files (Scored)
  shell: |
    cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        if [ ! -h "$dir/.netrc" -a -f "$dir/.netrc" ]; then
          echo ".netrc file $dir/.netrc exists"
        fi
      fi
    done
  args:
    executable: /bin/bash 
  register: user_netrc_files

- debug: var=user_netrc_files.stdout_lines

- name: 6.2.13 Ensure users' .netrc Files are not group or world accessible (Scored)
  shell: |
    cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        for file in $dir/.netrc; do
          if [ ! -h "$file" -a -f "$file" ]; then
            fileperm=`ls -ld $file | cut -f1 -d" "`
            if [ `echo $fileperm | cut -c5`  != "-" ]; then
              echo "Group Read set on $file"
            fi
            if [ `echo $fileperm | cut -c6`  != "-" ]; then
              echo "Group Write set on $file"
            fi
            if [ `echo $fileperm | cut -c7`  != "-" ]; then
              echo "Group Execute set on $file"
            fi
            if [ `echo $fileperm | cut -c8`  != "-" ]; then
              echo "Other Read set on $file"
            fi
            if [ `echo $fileperm | cut -c9`  != "-" ]; then
              echo "Other Write set on $file"
            fi
            if [ `echo $fileperm | cut -c10`  != "-" ]; then
              echo "Other Execute set on $file"
            fi 
          fi
        done
      fi
    done 
  args:
    executable: /bin/bash 
  register: user_netrc_files_permissions

- debug: var=user_netrc_files_permissions.stdout_lines

- name: 6.2.14 Ensure no users have .rhosts files (Scored)
  shell: |
    cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      else
        for file in $dir/.rhosts; do
          if [ ! -h "$file" -a -f "$file" ]; then
            echo ".rhosts file in $dir"
          fi
        done
      fi
    done
  args:
    executable: /bin/bash 
  register: user_rhosts_files

- debug: var=user_rhosts_files.stdout_lines

- name: 6.2.15 Ensure all groups in /etc/passwd exist in /etc/group (Scored)
  shell: |
    for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
      grep -q -P "^.*?:[^:]*:$i:" /etc/group  if [ $? -ne 0 ]; then
        echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
      fi
    done 
  args:
    executable: /bin/bash 
  register: check_groups_in_passwd

- debug: var=check_groups_in_passwd.stdout_lines

- name: 6.2.16 Ensure no duplicate UIDs exist (Scored)
  shell: |
    cat /etc/passwd | cut -f3 -d":" | sort -n | uniq -c | while read x ; do
      [ -z "${x}" ] && break
      set - $x
      if [ $1 -gt 1 ]; then
        users=`awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs`
        echo "Duplicate UID ($2): ${users}"
      fi
    done
  args:
    executable: /bin/bash 
  register: duplicate_uids

- debug: var=duplicate_uids.stdout_lines

- name: 6.2.17 Ensure no duplicate GIDs exist (Scored)
  shell: |
    cat /etc/group | cut -f3 -d":" | sort -n | uniq -c | while read x ; do
      [ -z "${x}" ] && break
      set - $x
      if [ $1 -gt 1 ]; then
        groups=`awk -F: '($3 == n) { print $1 }' n=$2 /etc/group | xargs`
        echo "Duplicate GID ($2): ${groups}"
      fi
    done
  args:
    executable: /bin/bash 
  register: duplicate_gids

- debug: var=duplicate_gids.stdout_lines

- name: 6.2.18 Ensure no duplicate user names exist (Scored)
  shell: |
    cat /etc/passwd | cut -f1 -d":" | sort -n | uniq -c | while read x ; do
      [ -z "${x}" ] && break
      set - $x
      if [ $1 -gt 1 ]; then
        uids=`awk -F: '($1 == n) { print $3 }' n=$2 /etc/passwd | xargs`
        echo "Duplicate User Name ($2): ${uids}"
      fi
    done
  args:
    executable: /bin/bash 
  register: duplicate_users

- debug: var=duplicate_users.stdout_lines

- name: 6.2.19 Ensure no duplicate group names exist (Scored)
  shell: |
    cat /etc/group | cut -f1 -d":" | sort -n | uniq -c | while read x ; do
      [ -z "${x}" ] && break
      set - $x  if [ $1 -gt 1 ]; then
        gids=`gawk -F: '($1 == n) { print $3 }' n=$2 /etc/group | xargs`
        echo "Duplicate Group Name ($2): ${gids}"
      fi
    done
  args:
    executable: /bin/bash 
  register: duplicate_groups

- debug: var=duplicate_groups.stdout_lines

- name: 6.2.20 Ensure shadow group is empty (Scored)
  shell: grep '^shadow' /etc/group | cut -f4 -d':'
  register: shadow_group_empty
  failed_when: shadow_group_empty.stdout != ''
